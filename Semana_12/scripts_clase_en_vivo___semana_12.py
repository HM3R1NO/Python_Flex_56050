# -*- coding: utf-8 -*-
"""Scripts - Clase en vivo _ Semana 12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AXZT1o-kUTV7SJaEWNtAgsWJBQyvfxMY

# Mejor con CBV

Ejemplo con codigo de curso.  
Los templates que estan en la carpeta junto a este colab en el drive son los de las vistas de la celda de abajo
"""

class CursoListView(ListView):
    model = Curso
    context_object_name = "cursos"
    template_name = "AppCoder/curso_lista.html"

    # ESTA PARTE DE GET_QUERYSET Y GET_CONTEXT_DATA NO ESTA EN LA CLASE
    # COMENTARLO PARA QUE VEAN COMO IMPLEMENTAR EL BUSCADOR EN LAS CBV
    # https://docs.djangoproject.com/en/4.1/ref/class-based-views/mixins-multiple-object/#django.views.generic.list.MultipleObjectMixin.get_queryset

    def get_queryset(self):
        camada = self.request.GET.get('camada', '')
        if camada:
            cursos = self.model.objects.filter(camada__icontains=camada)
        else:
            cursos = self.model.objects.all()
        return cursos

    def get_context_data(self, **kwargs):
        context = super().get_context_data(**kwargs)
        context["formulario"] = BusquedaAuto()
        return context

class CursoDetailView(DetailView):
    model = Curso
    template_name = "AppCoder/curso_detalle.html"

class CursoCreateView(CreateView):
    model = Curso
    template_name = "AppCoder/curso_crear.html"
    success_url = reverse_lazy('ListaCursos')
    fields = ['nombre', 'camada']

class CursoUpdateView(LoginRequiredMixin, UpdateView):
    model = Curso
    template_name = "AppCoder/curso_editar.html"
    success_url = reverse_lazy('ListaCursos')
    fields = ['nombre', 'camada']

class CursoDeleteView(LoginRequiredMixin, DeleteView):
    model = Curso
    template_name = "AppCoder/curso_borrar.html"
    success_url = reverse_lazy('ListaCursos')

path('cursos/lista', views.CursoListView.as_view(), name = "ListaCursos"),
    path('cursos/nuevo', views.CursoCreateView.as_view(), name = "NuevoCurso"),
    path('cursos/<pk>', views.CursoDetailView.as_view(), name = "DetalleCurso"),
    path('cursos/<pk>/editar', views.CursoUpdateView.as_view(), name = "EditarCurso"),
    path('cursos/<pk>/borrar', views.CursoDeleteView.as_view(), name = "BorrarCurso"),

"""# Mixins y decoradores"""

from django.contrib.auth.mixins import LoginRequiredMixin

class CursoUpdateView(LoginRequiredMixin, UpdateView):

class CursoDeleteView(LoginRequiredMixin, DeleteView):

from django.contrib.auth.decorators import login_required

@login_required
def inicio(request):
    return render(request, 'AppCoder/inicio.html')

LOGIN_URL = '/AppCoder/login'