# -*- coding: utf-8 -*-
"""Scripts - Contenido Pregrabado _ Semana 12.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Dpy2yWVhJDD0SQbOekEjaYpn_7xC8o2P

# CRUD
"""

#=================mensajes======================================
from django.contrib import messages



                            {% if messages %}
                                <ul class="messages">
                                    {% for message in messages %}
                                        <li{% if message.tags %} class="{{ message.tags }}"{% endif %}>{{ message }}</li>
                                    {% endfor %}
                                </ul>
                            {% endif %}

messages.success(request, 'El profesor ha sido creado con éxito.')

#=============================================================
def __str__(self):
        return f"Nombre: {self.nombre} - Apellido {self.apellidade} - E-Mail {self.email} - Edad {self.edad}"

def profesores(request):
    if request.method == "POST":
            miFormulario = ProfesorForm(request.POST) # Aqui me llega la informacion del html
            print(miFormulario)
            if miFormulario.is_valid:
                informacion = miFormulario.cleaned_data
                profesor = Profesor(nombre=informacion["nombre"], apellidade=informacion["apellidade"], email=informacion["email"], edad=informacion["edad"])
                profesor.save()
                return render(request, "AppCoder/index.html")
    else:
            miFormulario = ProfesorForm()
    return render(request, "App12/profesores12.html", {"miFormulario": miFormulario})

class ProfesorFormulario(forms.Form):
    nombre = forms.CharField(max_length=30)
    apellido = forms.CharField(max_length=30)
    email = forms.EmailField()
    profesion = forms.CharField(max_length=30)

{% if miFormulario.errors %}
<p style="color: red">Estan mal los datos, revisar</p>
{% endif %}
<form action="" method="post">
{% csrf_token %}
<!-- Aca esta la magia de Django-->
<table>
    {{miFormulario.as_table}}
</table>
<input type="submit" value="Enviar">
</form>

<a href="/AppCoder/Profesores/">Agregar Profesor</a>

def leerProfesores(request):

      profesores = Profesor.objects.all() #trae todos los profesores

      contexto= {"profesores":profesores}

      return render(request, "App12/leerProfesores12.html",contexto)

path('leerProfesores', views.leerProfesores, name = "leerProfesores12")

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
</head>
<body>
    {% for p in profesores %}
        <li>{{p}}</li>
    {% endfor %}
</body>
</html>

<a class="navbar-brand" href="{% url leerProfesores12%}">Profesores</a>

def eliminarProfesor12(request, profesor_nombre):
    profesor = Profesor.objects.get(nombre=profesor_nombre)
    profesor.delete()
    # vuelvo al menú
    profesores = Profesor.objects.all()  # trae todos los profesores
    contexto = {"profesores": profesores}
     return render(request, "App12/leerProfesores12.html", contexto)

<body>
    {% for p in profesores %}
        <li>{{p}}</li>
        <button>
            <a class="btn btn-dark" href="{% url 'eliminarProfesor12' p.nombre %}"> Eliminar</a>
        </button>
    {% endfor %}
    <br>
    <a href="profesores">Agregar otro Profesor</a>
</body>

path('eliminarProfesor12/<profesor_nombre>/', eliminarProfesor12, name="eliminarProfesor12")

def editarProfesor12(request, profesor_nombre):

    # Recibe el nombre del profesor que vamos a modificar
    profesor = Profesor.objects.get(nombre=profesor_nombre)

    # Si es metodo POST hago lo mismo que el agregar
    if request.method == 'POST':

        # aquí mellega toda la información del html
        miFormulario = ProfesorForm(request.POST)

        print(miFormulario)

        if miFormulario.is_valid:  # Si pasó la validación de Django

            informacion = miFormulario.cleaned_data

            profesor.nombre = informacion['nombre']
            profesor.apellidade = informacion['apellidade']
            profesor.email = informacion['email']
            profesor.edad = informacion['edad']

            profesor.save()

            # Vuelvo al inicio o a donde quieran
            return render(request, "AppCoder/index.html")
    # En caso que no sea post
    else:
        # Creo el formulario con los datos que voy a modificar
        miFormulario = ProfesorFormulario(initial={'nombre': profesor.nombre, 'apellidade': profesor.apellidade,
                                                   'email': profesor.email, 'edad': profesor.edad})

    # Voy al html que me permite editar
    return render(request, "App12/editarProfesor12.html", {"miFormulario": miFormulario, "profesor_nombre": profesor_nombre})

path('editarProfesor12/<profesor_nombre>/', editarProfesor12, name="editarProfesor12")

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
    <!--Aquí va lo que cambia, y lo asociado a está vista :) -->
    <h1>Formulario - Editar Profesor</h1>
    {% if miFormulario.errors %}
        <p style="color: red;"> Están mal los datos, revisar</p>
    {% endif %}

    <form action="" method="POST">{% csrf_token %}
        <!-- Acá está la magia de Django-->
        <table>
            {{ miFormulario.as_table }}
        </table>
        <input type="submit", value="Enviar">
    </form>
{% endblock %}

<button>
    <a class="btn btn-dark" href="{% url 'editarProfesor12' p.nombre %}"> Editar</a>
</button>

"""# Clases basadas en vistas"""

#·==========================================================
from django.views.generic import ListView
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView
from django.views.generic.edit import UpdateView
from django.urls import reverse_lazy

class CursoListView(ListView):
    model = Curso
    context_object_name = "cursos"
    template_name = "App12/curso_lista.html"

class CursoDetailView(DetailView):
    model = Curso
    template_name = "App12/curso_detalle.html"

class CursoCreateView(CreateView):
    model = Curso
    template_name = "App12/curso_crear.html"
    success_url = reverse_lazy('ListaCursos')
    fields = ['nombre', 'camada']

class CursoUpdateView(UpdateView):
    model = Curso
    template_name = "App12/curso_editar.html"
    success_url = reverse_lazy('ListaCursos')
    fields = ['nombre', 'camada']

from django.views.generic.edit import DeleteView
class CursoDeleteView(DeleteView):
    model = Curso
    template_name = "App12/curso_borrar.html"
    success_url = reverse_lazy('ListaCursos')

from django.views.generic import ListView
from django.views.generic.detail import DetailView
from django.views.generic.edit import CreateView, UpdateView, DeleteView

path('cursos/lista', CursoListView.as_view(), name = "ListaCursos"),
path('cursos/nuevo', CursoCreateView.as_view(), name = "NuevoCurso"),
path('cursos/<pk>', CursoDetailView.as_view(), name = "DetalleCurso"),
path('cursos/<pk>/editar', CursoUpdateView.as_view(), name = "EditarCurso"),
path('cursos/<pk>/borrar', CursoDeleteView.as_view(), name = "BorrarCurso"),

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
<h1>Borrar Profesor</h1>


<form action="" method="POST">
    {% csrf_token %}
    Estas seguro que deseas borrar el curso {{curso.nombre}} - camada {{curso.camada}} ??
    <input type="submit" value="Eliminar">
</form>
{% endblock contenidoQueCambia  %}

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
<h1>Curso Detalle</h1>


<p>Nombre del Curso: <i>{{curso.nombre}}</i></p>
<p>Camada: <i>{{curso.camada}}</i></p>
<p>
    <a href="{% url 'ListaCursos' %}">Regresar</a>
</p>
{% endblock contenidoQueCambia  %}

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
<h1>Crear Curso</h1>


<form action="" method="POST">
    {% csrf_token %}
    {{form.as_p}}
    <input type="submit" value="Crear">
</form>
{% endblock contenidoQueCambia  %}

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
<h1>Editar Curso</h1>


<form action="" method="POST">
    {% csrf_token %}
    {{form.as_p}}
    <input type="submit" value="Editar">
</form>
{% endblock contenidoQueCambia  %}

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
<h1>Listado de Cursos</h1>


<a href={% url 'NuevoCurso' %}>Nuevo Curso</a>
{% for curso in cursos %}
    <li>Nombre: {{curso.nombre}}
        <p>
            <a href="{% url 'DetalleCurso' curso.pk %}">Ver</a>
            |
            <a href="{% url 'EditarCurso' curso.pk %}">Editar</a>
            |
            <a href="{% url 'BorrarCurso' curso.pk %}">Borrar</a>


        </p>
    </li>
{% endfor %}


{% endblock cuerpo  %}
#======================================================
"""# Login - registro -logout"""
{% extends 'AppCoder/index.html'%}
{% load static %}

{% block titulo%}Login{% endblock titulo%}

{% block cuerpo %}
<h1>Login</h1>


<form action="" method="POST">
    {% csrf_token %}
        {{ form.as_p }}
    <button type="submit">Inciar sesion</button>
</form>
{% endblock cuerpo  %}

path('login', views.login_request, name="Login")

from django.contrib.auth.forms import AuthenticationForm
from django.contrib.auth import login, authenticate

def login_request(request):
    if request.method == 'POST':
        form = AuthenticationForm(request, data = request.POST)

        if form.is_valid():  # Si pasó la validación de Django
            usuario = form.cleaned_data.get('username')
            contrasenia = form.cleaned_data.get('password')
            user = authenticate(username= usuario, password=contrasenia)

            login(request, user)
            return render(request, "AppCoder/index.html", {"mensaje": f'Bienvenido {user.username}'})
    else:
        form = AuthenticationForm()
    return render(request, "App12/login.html", {"form": form})

{% if mensaje %}
    <p>
        {{mensaje}}
    </p>
{% endif %}

from django.contrib.auth.forms import AuthenticationForm, UserCreationForm

# Vista de registro
def register(request):

      if request.method == 'POST':

            #form = UserCreationForm(request.POST)
            form = UserRegisterForm(request.POST)
            if form.is_valid():

                  username = form.cleaned_data['username']
                  form.save()
                  return render(request,"AppCoder/index.html" ,  {"mensaje":"Usuario Creado :)"})

      else:
            #form = UserCreationForm()
            form = UserRegisterForm()

      return render(request,"App12/registro.html" ,  {"form":form})

path('register', register, name="Register"),

{% extends "AppCoder/index.html" %}
{% load static %}
{% block cuerpo %}
<h1>Registro</h1>
<form action="" method="POST">
    {% csrf_token %}
    {{ form.as_p }}
    <button type="submit">Registrate!</button>
</form>
{% endblock cuerpo  %}

from django.contrib.auth.forms import UserCreationForm
from django.contrib.auth.models import User

class UserRegisterForm(UserCreationForm):
    email = forms.EmailField()
    password1 = forms.CharField(label="Contraseña", widget=forms.PasswordInput)
    password2 = forms.CharField(label="Repetir contraseña", widget=forms.PasswordInput)

    class Meta:
        model = User
        fields = ['username', 'email', 'password1', 'password2']
        # Saca los mensajes de ayuda
        help_texts = {k:"" for k in fields}

from django.contrib.auth.views import LogoutView

path('logout', LogoutView.as_view(template_name='AppCoder/logout.html'), name='Logout'),

{% extends "AppCoder/padre.html" %}
{% load static %}
{% block contenidoQueCambia %}
<h1>Te has deslogueado...</h1>
{% endblock contenidoQueCambia  %}

<a class="btn btn-primary" href="{% url 'Login' %}">Login</a>
                <a class="btn btn-primary" href="{% url 'Register' %}">Registro</a>
                <a class="btn btn-primary" href="{% url 'Logout' %}">Logout</a>
                
                
                
                
                
                
                
                
 path("login/", login_view, name="Login"),
 
 def login_view(request):

    if request.method == "POST": #click al boton iniciar sesion

        form_inicio = AuthenticationForm(request, data = request.POST)
        
        if form_inicio.is_valid(): #el formulario nos ayuda a validar

            info = form_inicio.cleaned_data #data que se escribio en el formulario de login en modo diccionario 
            usuario = info.get("username")
            contra = info.get("password")

            #acá hacemos la validación
            user = authenticate(username=usuario, password=contra) #existe el usuario (retorna el usuario) ---- no existe usuario (retorna None)

            if user:
                login(request, user)    #iniciar sesion ya que el usuario si existe (credenciales correctas)
                return render(request, "AppCoder/inicio.html", {"usuario":user})
        
        else:
            return render(request,"AppCoder/inicio.html", {"mensaje":"DATOS INCORRECTOS"})

    form_inicio = AuthenticationForm() #formulario vacio

    return render(request,"AppCoder/login.html", {"form":form_inicio} )





from django.contrib.auth.mixins import LoginRequiredMixin

class CursoUpdateView(LoginRequiredMixin, UpdateView):

class CursoDeleteView(LoginRequiredMixin, DeleteView):

from django.contrib.auth.decorators import login_required

@login_required
def inicio(request):
    return render(request, 'AppCoder/inicio.html')

LOGIN_URL = '/AppCoder/login'